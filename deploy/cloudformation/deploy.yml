AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Cvat test stack'

Parameters:
  ServiceName:
    Type: String
    Description: A name for the service
    Default: Cvat
  DbName:
    Type: String
    Default: cvat
    Description: The name of the postgres database resource
  DbUser:
    Description: The username of the database
    Type: String
    NoEcho: true
    Default: root
  DbPassword:
    Description: The password of the database
    Type: AWS::SSM::Parameter::Value<String>
    Default: /datarock/cvat/dbpassword
    NoEcho: true
  SSLCertificateArn:
    Description: SSL certificate arn
    Type: String
  CvatECRRepositoryName:
    Description: Cvat app repo name
    Type: String
    Default: datarock/cvat
  CvatUIECRRepositoryName:
    Description: Cvat UI ECR repo name
    Type: String
    Default: datarock/cvat_ui
  CvatImageTag:
    Description: Cvat ECR image tag
    Type: String
    Default: latest
  CostGroupTag:
    Description: Cost group tag
    Type: String
    Default: ECS test
  SSHKeyPairName:
    Description: SSH keypair name
    Type: String
    Default: ecs-keypair
  DomainName:
    Description: domain name
    Type: String
    Default: datarock.com.au
  HostName:
    Description: host name
    Type: String
    Default: label
  ECSDesiredCapacity:
    Description: desired ECS instance capacity
    Type: Number
    Default: 1
  ECSMaxCapacity:
    Description: desired ECS instance capacity
    Type: Number
    Default: 4
  ECSSpotPrice:
    Description: Spot price to bid
    Type: Number
    Default: 0.0584
  APIServiceDesiredCount:
    Description: desired ECS instance capacity
    Type: Number
    Default: 1
  UIServiceDesiredCount:
    Description: desired ECS instance capacity
    Type: Number
    Default: 1
  ServiceMaxCount:
    Description: desired ECS instance capacity
    Type: Number
    Default: 4
  HostedZoneName:
    Description: hosted zone
    Type: String
  HostUrl:
    Description: hosted url
    Type: String
  CreateCvatApiService:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: if true deploy CvatApi service
  CreateCvatUIService:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: if true deploy CvatApi service

Conditions:
  EnableTaskCvatApi: !Equals [!Ref CreateCvatApiService, 'true']
  EnableTaskCvatUI: !Equals [!Ref CreateCvatUIService, 'true']

Resources:
  CfnEcsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-ecs.yml
      Parameters:
        KeyPairName: !Ref SSHKeyPairName
        SSHLocation: '10.0.0.0/16'
        ServiceName: !Ref ServiceName
        VpcCIDR: '10.0.0.0/16'
        PublicOneCIDR: '10.0.0.0/24'
        PublicTwoCIDR: '10.0.1.0/24'
        PrivateOneCIDR: '10.0.2.0/24'
        PrivateTwoCIDR: '10.0.3.0/24'
        DesiredCapacity: !Ref ECSDesiredCapacity
        MaxSize: !Ref ECSMaxCapacity
        InstanceType: t2.medium
        SpotPrice: !Ref ECSSpotPrice
        EFSNameTag: CvatEFSVolume
        SSLCertificateArn:  !Ref SSLCertificateArn
        HostName: !Ref HostName
        HostedZoneName: !Ref HostedZoneName
      Tags:
        - Key: CostGroup
          Value: !Ref CostGroupTag

  CfnEcrStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-ecr.yml
      Parameters:
        VpcId: !GetAtt [CfnEcsStack, Outputs.VPCId]
        PrivateSubnetOne: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetOne]
        PrivateSubnetTwo: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetTwo]
        PrivateRouteTableOne: !GetAtt [CfnEcsStack, Outputs.PrivateRouteTableOne]
        PrivateRouteTableTwo: !GetAtt [CfnEcsStack, Outputs.PrivateRouteTableTwo]
        EcsHostSecurityGroup:
          !GetAtt [CfnEcsStack, Outputs.EcsHostSecurityGroup]
        CvatECRRepositoryName: !Ref CvatECRRepositoryName
        CvatUIECRRepositoryName: !Ref CvatUIECRRepositoryName
      Tags:
        - Key: CostGroup
          Value: !Ref CostGroupTag

  CfnRedisStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-redis.yml
      Parameters:
        VpcId: !GetAtt [CfnEcsStack, Outputs.VPCId]
        PrivateSubnetOne: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetOne]
        PrivateSubnetTwo: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetTwo]
        ClusterName: Cvat-redis
        EcsHostSecurityGroup:
          !GetAtt [CfnEcsStack, Outputs.EcsHostSecurityGroup]
        CacheNodeType: cache.t2.micro
      Tags:
        - Key: CostGroup
          Value: !Ref CostGroupTag

  CfnCloudWatchStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-cloudwatch.yml
      Parameters:
        ClusterName: !GetAtt [CfnEcsStack, Outputs.ClusterName]
        ECSAutoScalingGroup: !GetAtt [CfnEcsStack, Outputs.ECSAutoScalingGroup]

  CfnECSLifeCycleHookStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-ecs-lifecyclehook.yml
      Parameters:
        ClusterName: !GetAtt [CfnEcsStack, Outputs.ClusterName]
        ECSAutoScalingGroup: !GetAtt [CfnEcsStack, Outputs.ECSAutoScalingGroup]

  CfnRdsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-rds.yml
      Parameters:
        DbName: !Ref DbName
        DbMasterUser: !Ref DbUser
        DbMasterPassword: !Ref 'DbPassword'
        DbInstanceClass: db.t3.micro
        VpcId: !GetAtt [CfnEcsStack, Outputs.VPCId]
        PrivateSubnetOne: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetOne]
        PrivateSubnetTwo: !GetAtt [CfnEcsStack, Outputs.PrivateSubnetTwo]
        EcsHostSecurityGroup:
          !GetAtt [CfnEcsStack, Outputs.EcsHostSecurityGroup]
      Tags:
        - Key: CostGroup
          Value: !Ref CostGroupTag

  CfnBastionStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-bastion.yml
      Parameters:
        InstanceType: t2.micro
        KeyPairName: !Ref SSHKeyPairName
        PublicSubnetOne: !GetAtt [CfnEcsStack, Outputs.PublicSubnetOne]
        PublicSubnetTwo: !GetAtt [CfnEcsStack, Outputs.PublicSubnetTwo]
        RemoteAccessCIDR: '0.0.0.0/0'
        VPCID: !GetAtt [CfnEcsStack, Outputs.VPCId]
        EcsHostSecurityGroup:
          !GetAtt [CfnEcsStack, Outputs.EcsHostSecurityGroup]
      Tags:
        - Key: CostGroup
          Value: !Ref CostGroupTag

  CfnCvatApiStack:
    Condition: EnableTaskCvatApi
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-cvat-api.yml
      Parameters:
        ClusterName: !GetAtt [CfnEcsStack, Outputs.ClusterName]
        ServiceName: Cvat-app
        PublicListener: !GetAtt [CfnEcsStack, Outputs.PublicAPILoadBalancerListener]
        HostUrl: !Ref HostUrl
        VpcId: !GetAtt [CfnEcsStack, Outputs.VPCId]
        DbHost: !GetAtt [CfnRdsStack, Outputs.DbEndpoint]
        DbName: !Ref DbName
        DbUser: !Ref DbUser
        DbPassword: !Ref 'DbPassword'
        RedisHost: !GetAtt [CfnRedisStack, Outputs.ElastiCacheAddress]
        Priority: 1
        DesiredCount: !Ref APIServiceDesiredCount
        MaxCount: !Ref ServiceMaxCount
        ImageUrl: !Join [ ':', [ !GetAtt [CfnEcrStack, Outputs.CvatECRRepository], !Ref 'CvatImageTag' ] ]
        ContainerCpu: 1024
        ContainerMemory: 1920
        AllowedHosts: '*'

  CfnCvatUIStack:
    Condition: EnableTaskCvatUI
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested/cfn-cvat-ui.yml
      Parameters:
        ClusterName: !GetAtt [CfnEcsStack, Outputs.ClusterName]
        ServiceName: Cvat-ui
        PublicListener: !GetAtt [CfnEcsStack, Outputs.PublicLoadBalancerListener]
        HostUrl: !Ref HostUrl
        VpcId: !GetAtt [CfnEcsStack, Outputs.VPCId]
        Priority: 2
        DesiredCount: !Ref UIServiceDesiredCount
        MaxCount: !Ref ServiceMaxCount
        ImageUrl: !Join [ ':', [ !GetAtt [CfnEcrStack, Outputs.CvatUIECRRepository], !Ref 'CvatImageTag' ] ]
        ContainerCpu: 256
        ContainerMemory: 512
