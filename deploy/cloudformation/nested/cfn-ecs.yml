AWSTemplateFormatVersion: '2010-09-09'
Description: Fargate ECS for CVAT
Parameters:
  ServiceName:
    Type: String
    Description: A name for the service
    Default: Cvat
  EFSNameTag:
    Description: The name of the EFS volume
    Type: String
    MinLength: '1'
    Default: myEFSvolume
  SSLCertificateArn:
    Description: SSL certificate arn
    Type: String
  HostedZoneName:
    Description: hosted zone
    Type: String
    Default: datarock.com.au.
  HostName:
    Description: host name
    Type: String
    Default: label
  VpcId:
    Type: String
    Default: vpc-02311d65
  PrivateSubnetOne:
    Type: String
    Default: subnet-290e1a4e
  PrivateSubnetTwo:
    Type: String
    Default: subnet-d877f080
  PublicSubnetOne:
    Type: String
    Default: subnet-09726019e5ffaffc7
  PublicSubnetTwo:
    Type: String
    Default: subnet-04a66456615238488

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Ref 'EFSNameTag'
  MountTargetOne:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'FileSystem'
      SubnetId: !Ref 'PrivateSubnetOne'
      SecurityGroups:
        - !Ref 'MountTargetSecurityGroup'
  MountTargetTwo:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'FileSystem'
      SubnetId: !Ref 'PrivateSubnetTwo'
      SecurityGroups:
        - !Ref 'MountTargetSecurityGroup'

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VpcId'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicAppLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicAppLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: '8080'
            ToPort: '8080'
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: '8443'
            ToPort: '8443'
  PublicAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicAppLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub '${ServiceName}-Dummy-Drop-One'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'

  DummyAPITargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub '${ServiceName}-Dummy-Drop-Two'
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'

  PublicAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicAppLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicAppLoadBalancer'
      # Port: 80
      # Protocol: HTTP
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn

  PublicAPILoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicAppLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyAPITargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicAppLoadBalancer'
      # Port: 8080
      # Protocol: HTTP
      Port: 8443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn

  # Redirect HTTP to HTTPS
  PublicAppLoadBalancerHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicAppLoadBalancer
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: 'HTTPS'
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'PublicAppLoadBalancer'
      Port: 80
      Protocol: HTTP

  PublicAPILoadBalancerHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicAppLoadBalancer
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 8443
            Protocol: 'HTTPS'
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'PublicAppLoadBalancer'
      Port: 8080
      Protocol: HTTP

  ClusterDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Comment: Zone apex alias targeted to ALB of Cluster.
      RecordSets:
      - Name:
          Fn::Join: ["", [!Ref HostName, ".", !Ref HostedZoneName]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt PublicAppLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt PublicAppLoadBalancer.DNSName

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicAppLoadBalancer.DNSName']]
  ExternalDNSName:
    Description: The ExternalDNSName of the external load balancer
    Value: !GetAtt 'PublicAppLoadBalancer.DNSName'
  PublicLoadBalancerListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicAppLoadBalancerListener
  PublicAPILoadBalancerListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicAPILoadBalancerListener
  ContainerSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
  FileSystem:
    Description: EFS System Id
    Value: !Ref 'FileSystem'
