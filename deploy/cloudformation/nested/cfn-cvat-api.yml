AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy redis service into an ECS cluster behind a private load balancer.
Parameters:
  ClusterName:
    Type: String
    Description: ECS Cluster name

  ServiceName:
    Type: String
    Default: cvat
    Description: A name for the service

  ImageUrl:
    Type: String
    Default: 980755931163.dkr.ecr.ap-southeast-2.amazonaws.com/datarock/cvat:latest
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  PublicListener:
    Type: String
    Description: Public EBL Listener

  VpcId:
    Type: String
    Description: The Id for the Vpc used for deployment

  ExternalUrl:
    Type: String
    Description: Public EBL url

  DbHost:
    Description: The host of the database
    Type: String

  DbName:
    Description: The name of the database
    Type: String
    Default: cvat

  DbUser:
    Description: The username of the database
    Type: String
    Default: root

  DbPassword:
    Description: The password of the database
    Type: String
    Default: ''

  RedisHost:
    Description: The redis host
    Type: String

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  MaxCount:
    Type: Number
    Default: 2
    Description: Max copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  AllowedHosts:
    Type: String
    Default: 'localhost, 127.0.0.0'

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      Volumes:
        - Host:
            SourcePath: /mnt/efs/cvat/data
          Name: efs-cvat-data
        - Host:
            SourcePath: /mnt/efs/cvat/keys
          Name: efs-cvat-keys
        - Host:
            SourcePath: /mnt/efs/cvat/logs
          Name: efs-cvat-logs
        - Host:
            SourcePath: /mnt/efs/cvat/models
          Name: efs-cvat-models
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          MountPoints:
            - ContainerPath: /home/django/data
              SourceVolume: efs-cvat-data
            - ContainerPath: /home/django/keys
              SourceVolume: efs-cvat-keys
            # - ContainerPath: /home/django/logs
            #   SourceVolume: efs-cvat-logs
            - ContainerPath: /home/django/models
              SourceVolume: efs-cvat-models
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: DJANGO_MODWSGI_EXTRA_ARGS
              Value: ''
            - Name: UI_SCHEME
              Value: https
            - Name: UI_HOST
              Value: !Ref 'ExternalUrl'
            - Name: UI_PORT
              Value: 443
            - Name: DB_HOST
              Value: !Ref 'DbHost'
            - Name: DB_NAME
              Value: !Ref 'DbName'
            - Name: DB_USER
              Value: !Ref 'DbUser'
            - Name: DB_PASSWORD
              Value: !Ref 'DbPassword'
            - Name: REDIS_HOST
              Value: !Ref 'RedisHost'
            - Name: ALLOWED_HOSTS
              Value: !Ref 'AllowedHosts'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ClusterName'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: 8080
          TargetGroupArn: !Ref 'TargetGroup'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DesiredCount
      MaxCapacity: !Ref MaxCount
      ResourceId: !Join ['/', [service, !Ref ClusterName, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyCpu:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: AutoScalingTarget
    Properties:
      PolicyName: !Sub '${ServiceName}AutoScalingPolicyCpu'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 70

  AutoScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: AutoScalingTarget
    Properties:
      PolicyName: !Sub '${ServiceName}AutoScalingPolicyMemory'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 80

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceName'
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      Matcher:
        HttpCode: '200-399'

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref 'PublicListener'
      Priority: !Ref 'Priority'

Outputs:
  CvatApiUrl:
    Description: The url of the external load balancer
    Value: !Join ['',[ !Ref 'ExternalUrl', '8080']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CvatApiUrl' ] ]