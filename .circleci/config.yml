# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  jq: circleci/jq@1.9.0

executors:
  python:
    docker:
      - image: circleci/python:3.6.1

general:
  branches:
    only:
     - deploy

jobs:
  # This part used for deply preparation only
  # pre_deploy-prod:
  #   executor: python

  #   working_directory: ~/repo

  #   steps:
  #     - checkout

  #     - run:
  #         name: Setup production Environment Variables
  #         command: |
  #           echo export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD_ENV >> $BASH_ENV
  #           echo export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD_ENV >> $BASH_ENV
  #           echo export AWS_DEFAULT_REGION="ap-southeast-2" >> $BASH_ENV
  #           echo export DEPLOY-PRODUCTION="true" >> $BASH_ENV
  #     - aws-cli/install
  #     - jq/install
  #     - aws-cli/configure

  #     - setup_remote_docker:
  #         docker_layer_caching: true

  #     - run:
  #         name: Deploy
  #         command: |
  #           ./deploy/bin/run-before-first-deploy.sh
  #         no_output_timeout: 45m
  build-test-image:
    executor: python

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Setup test Environment Variables
          command: |
            echo export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_TEST_ENV >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_TEST_ENV >> $BASH_ENV
            echo export AWS_DEFAULT_REGION="ap-southeast-2" >> $BASH_ENV
      - aws-cli/install
      - jq/install
      - aws-cli/configure

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Deploy
          command: |
            ./deploy/bin/docker-build.sh
          no_output_timeout: 45m

  build-prod-image:
    executor: python

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Setup prod Environment Variables
          command: |
            echo export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD_ENV >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD_ENV >> $BASH_ENV
            echo export AWS_DEFAULT_REGION="ap-southeast-2" >> $BASH_ENV
            echo export DEPLOY-PRODUCTION="true" >> $BASH_ENV
      - aws-cli/install
      - jq/install
      - aws-cli/configure

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Deploy
          command: |
            ./deploy/bin/docker-build.sh
          no_output_timeout: 45m

  deploy-test:
    executor: python

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Setup test Environment Variables
          command: |
            echo export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_TEST_ENV >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_TEST_ENV >> $BASH_ENV
            echo export AWS_DEFAULT_REGION="ap-southeast-2" >> $BASH_ENV
      - aws-cli/install
      - jq/install
      - aws-cli/configure

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Deploy
          command: |
            ./deploy/bin/deploy.sh
          no_output_timeout: 45m

  deploy-prod:
    executor: python

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Setup production Environment Variables
          command: |
            echo export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD_ENV >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD_ENV >> $BASH_ENV
            echo export AWS_DEFAULT_REGION="ap-southeast-2" >> $BASH_ENV
            echo export DEPLOY-PRODUCTION="true" >> $BASH_ENV
      - aws-cli/install
      - jq/install
      - aws-cli/configure

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Deploy
          command: |
            ./deploy/bin/deploy.sh
          no_output_timeout: 45m

workflows:
  version: 2
  deploy-test:
    jobs:
      - build-test-image-approval:
          type: approval
          filters:
            branches:
              only: deploy
      - build-test-image:
          requires:
            - build-test-image-approval
          filters:
            branches:
              only: deploy
      - deploy-test-approval:
          type: approval
          filters:
            branches:
              only: deploy
      - deploy-test:
          requires:
            - deploy-test-approval
          filters:
            branches:
              only: deploy
  # This part used for deply preparation only
  # pre_deploy-prod:
  #   jobs:
  #     - pre-deploy-prod-approval:
  #         type: approval
  #         filters:
  #           branches:
  #             only: deploy
  #     - pre_deploy-prod:
  #         requires:
  #           - pre-deploy-prod-approval
  #         filters:
  #           branches:
  #             only: deploy

  deploy-prod:
    jobs:
      - build-prod-image-approval:
          type: approval
          filters:
            branches:
              only: deploy
      - build-prod-image:
          requires:
            - build-prod-image-approval
          filters:
            branches:
              only: deploy
      - deploy-prod-approval:
          type: approval
          filters:
            branches:
              only: deploy
      - deploy-prod:
          requires:
            - deploy-prod-approval
          filters:
            branches:
              only: deploy